# Generated by Django 5.0.9 on 2024-09-25 14:54

import datetime
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.forms.models
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0026_delete_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Post date')),
                ('summary', models.CharField(blank=True, help_text='A summary to be displayed instead of the body for index views', max_length=250)),
                ('body', wagtail.fields.RichTextField(blank=True)),
                ('embed_url', models.URLField(blank=True, help_text='For pages with an iFrame, the URL of the embedded contnet', verbose_name='Embed Target URL')),
                ('embed_frame_style', models.CharField(blank=True, default='width:90%; height:1600px;', help_text='For pages with an iFrame, styling for the frame', max_length=255, verbose_name='Frame Style')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticleIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('show_pagetitle', models.BooleanField(default=True, help_text='If the page title should be shown')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticleStaticTagsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('show_pagetitle', models.BooleanField(default=True, help_text='If the page title should be shown')),
                ('included_tag_names_string', models.CharField(blank=True, help_text='A comma separated list of tags to be included in this page which can also be grouped - separate groups with semicolon', max_length=255, verbose_name='tags included')),
                ('tag_titles_string', models.CharField(blank=True, help_text='A comma separated list of titles to be used instead of the tag names - not separated by group', max_length=255, verbose_name='tag titles')),
                ('group_titles_string', models.CharField(blank=True, help_text='A comma separated list of titles to be used for tag groups', max_length=255, verbose_name='group titles')),
                ('first_group_is_special', models.BooleanField(default=False, help_text='If the first group is expected to be treated differetly from the others.  Implementation may vary by template app', verbose_name='first group is special')),
                ('separate_tag_groups', models.BooleanField(default=True, help_text='If the ArticlePages should be separated by tag')),
                ('repeat_ArticlePages', models.BooleanField(default=True, help_text='If separated by tag, if ArticlePages that have multiple included tags should be repeated')),
                ('show_tag_titles', models.BooleanField(default=True, help_text='If the tag name should be displayed as a title to accompany the ArticlePages')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticleTagIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.forms.models.FormMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('abstractarticlepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wibekwa.abstractarticlepage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wibekwa.abstractarticlepage',),
        ),
        migrations.CreateModel(
            name='FreeArticlePage',
            fields=[
                ('abstractarticlepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wibekwa.abstractarticlepage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wibekwa.abstractarticlepage',),
        ),
        migrations.CreateModel(
            name='ArticlePageGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='wibekwa.abstractarticlepage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticlePageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hide_from_lists', models.BooleanField(default=False, help_text="if this tag should be hidden from the list of tags in an ArticlePage's meta section and similar locations", verbose_name='hide from lists')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='wibekwa.articlepage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='abstractarticlepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='wibekwa.ArticlePageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('author_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.AddField(
            model_name='abstractarticlepage',
            name='authors',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, to='wibekwa.author'),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='wibekwa.formpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RedirectPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('target_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SiteSpecificImportantPages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_index_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteTemplateSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_banner_image', models.BooleanField(default=True, help_text='Show the chosen banner image.  If deselected, banner_text will be used instead of the image', verbose_name='show banner image')),
                ('banner_image_style', models.CharField(blank=True, default='50%', help_text='Styling for the banner image or if a single value, A css value representing the width of the banner image. Include at least one semicolon (;) to indicate that this is a style, and not just a width value', max_length=255)),
                ('banner_text', models.CharField(blank=True, default='Wibekwa', help_text='The alt text to be displayed if there is a banner image, or the text to be displayed if there is no image', max_length=80, verbose_name='banner_text')),
                ('site_description', models.CharField(blank=True, default='New Wibewa Wagtail Blog', help_text='The site description to be displayed near the banner image or banner text', max_length=80, verbose_name='site description')),
                ('show_leftbar', models.BooleanField(default=False, help_text='If the left sidebar should be shown - requires a template named wibewa/includes/sidebarleft.html')),
                ('show_rightbar', models.BooleanField(default=False, help_text='If the right sidebar should be shown - requires a template named wibewa/includes/sidebarright.html')),
                ('mainmenu_location', models.CharField(choices=[('none', 'None'), ('top', 'Top'), ('left', 'Left'), ('right', 'Right')], default='top', help_text='The location of the main menu', max_length=20, verbose_name='main menu location')),
                ('theme_color', models.CharField(default='black', help_text='The theme color. This should match the base name of a css file in a static folder wibekwa/css. Ex "blue" if there is a wibekwa/css/blue.css', max_length=30, verbose_name='theme color')),
                ('footer_text', models.CharField(blank=True, default='Created wth Wagtail and Wibekwa', help_text='The footer text.  This may be split into a list using footer_text_separator', max_length=255, verbose_name='footer text')),
                ('footer_text_separator', models.CharField(blank=True, default=';', help_text='The character by which the footer text will be split into a list.  This is optional', max_length=2, verbose_name='footer text separator')),
                ('banner_image', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'verbose_name_plural': 'Template Settings',
            },
        ),
    ]
